{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOFEbD1+0OCQLPUM+BUzmx8"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#**AI Powered Customer Churn Prediction**"],"metadata":{"id":"0RWJVxmbQ1Cb"}},{"cell_type":"markdown","source":["My name is **Zubair Bin Imran** , and I am a dedicated student in the final year of my MSc in Data Science and Analytics program. I am focused on developing skills in data analysis, model building, and data-driven strategy.\n","\n","I am thrilled by the opportunity this project provides to bridge the gap between theory and practice. The chance to work with a real dataset and deliver a solution with clear business implications is an invaluable experience."],"metadata":{"id":"oe5nwljESawU"}},{"cell_type":"markdown","source":["#**Introduction to the Project**\n","\n","This project presents an AI-powered solution designed to proactively reduce customer churn for a telecommunications company. By analyzing a dataset of 7,000+ customer profiles, a machine learning pipeline was built using Python and Scikit-learn to forecast customer attrition. The model identifies the most influential churn factors and flags high-risk customers with high precision, enabling the business to implement targeted marketing campaigns and personalized offers to improve customer retention and protect revenue streams."],"metadata":{"id":"-ceGLlBIRpz4"}},{"cell_type":"markdown","source":["#**About the Dataset Used**"],"metadata":{"id":"qx3rX42AS2lt"}},{"cell_type":"markdown","source":["First, we need the dataset. We'll use the popular \"Telco Customer Churn\" dataset from IBM, which is available on Kaggle. It has over 7,000 records.\n","\n","The data set includes information about:\n","\n","1. **Customers who left within the last month** – the column is called Churn\n","\n","2. **Services that each customer has signed up for** – phone, multiple lines, internet, online security, online backup, device protection, tech support, and streaming TV and movies\n","\n","3. **Customer account information** – how long they’ve been a customer, contract, payment method, paperless billing, monthly charges, and total charges\n","\n","4. **Demographic info about customers** – gender, age range, and if they have partners and dependents\n","\n"],"metadata":{"id":"bmITKdtqS2kR"}},{"cell_type":"markdown","source":["#**Exploratory Data Analysis**"],"metadata":{"id":"GD0U2noxT8RI"}},{"cell_type":"code","execution_count":23,"metadata":{"id":"Wb0wY2mfQsq2","executionInfo":{"status":"ok","timestamp":1757168148611,"user_tz":-330,"elapsed":3,"user":{"displayName":"Zubair Imran","userId":"00267973920718476251"}}},"outputs":[],"source":["#Importing necessary libraries\n","\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns"]},{"cell_type":"code","source":["\n","#Loading the dataset\n","\n","df = pd.read_csv('TelcoCustomerChurn.csv')"],"metadata":{"id":"EHK6Rwn7Uj5o","executionInfo":{"status":"ok","timestamp":1757168150395,"user_tz":-330,"elapsed":174,"user":{"displayName":"Zubair Imran","userId":"00267973920718476251"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["#Initial Data Inspection\n","\n","df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7SVtdsklUyAc","executionInfo":{"status":"ok","timestamp":1757168150737,"user_tz":-330,"elapsed":12,"user":{"displayName":"Zubair Imran","userId":"00267973920718476251"}},"outputId":"f716bd73-df3c-4e9c-82f9-333605f0a697"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 7043 entries, 0 to 7042\n","Data columns (total 21 columns):\n"," #   Column            Non-Null Count  Dtype  \n","---  ------            --------------  -----  \n"," 0   customerID        7043 non-null   object \n"," 1   gender            7043 non-null   object \n"," 2   SeniorCitizen     7043 non-null   int64  \n"," 3   Partner           7043 non-null   object \n"," 4   Dependents        7043 non-null   object \n"," 5   tenure            7043 non-null   int64  \n"," 6   PhoneService      7043 non-null   object \n"," 7   MultipleLines     7043 non-null   object \n"," 8   InternetService   7043 non-null   object \n"," 9   OnlineSecurity    7043 non-null   object \n"," 10  OnlineBackup      7043 non-null   object \n"," 11  DeviceProtection  7043 non-null   object \n"," 12  TechSupport       7043 non-null   object \n"," 13  StreamingTV       7043 non-null   object \n"," 14  StreamingMovies   7043 non-null   object \n"," 15  Contract          7043 non-null   object \n"," 16  PaperlessBilling  7043 non-null   object \n"," 17  PaymentMethod     7043 non-null   object \n"," 18  MonthlyCharges    7043 non-null   float64\n"," 19  TotalCharges      7043 non-null   object \n"," 20  Churn             7043 non-null   object \n","dtypes: float64(1), int64(2), object(18)\n","memory usage: 1.1+ MB\n"]}]},{"cell_type":"code","source":["df.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xdXJMorDU5FL","executionInfo":{"status":"ok","timestamp":1757168158254,"user_tz":-330,"elapsed":24,"user":{"displayName":"Zubair Imran","userId":"00267973920718476251"}},"outputId":"0826b95b-5a1e-4752-f10b-bd8c67d0a5aa"},"execution_count":27,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(7043, 21)"]},"metadata":{},"execution_count":27}]},{"cell_type":"code","source":["df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":342},"id":"lmBsZA5kVRvi","executionInfo":{"status":"ok","timestamp":1757168159128,"user_tz":-330,"elapsed":40,"user":{"displayName":"Zubair Imran","userId":"00267973920718476251"}},"outputId":"17359124-1f88-4d81-bf2a-46a19af02752"},"execution_count":28,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   customerID  gender  SeniorCitizen Partner Dependents  tenure PhoneService  \\\n","0  7590-VHVEG  Female              0     Yes         No       1           No   \n","1  5575-GNVDE    Male              0      No         No      34          Yes   \n","2  3668-QPYBK    Male              0      No         No       2          Yes   \n","3  7795-CFOCW    Male              0      No         No      45           No   \n","4  9237-HQITU  Female              0      No         No       2          Yes   \n","\n","      MultipleLines InternetService OnlineSecurity  ... DeviceProtection  \\\n","0  No phone service             DSL             No  ...               No   \n","1                No             DSL            Yes  ...              Yes   \n","2                No             DSL            Yes  ...               No   \n","3  No phone service             DSL            Yes  ...              Yes   \n","4                No     Fiber optic             No  ...               No   \n","\n","  TechSupport StreamingTV StreamingMovies        Contract PaperlessBilling  \\\n","0          No          No              No  Month-to-month              Yes   \n","1          No          No              No        One year               No   \n","2          No          No              No  Month-to-month              Yes   \n","3         Yes          No              No        One year               No   \n","4          No          No              No  Month-to-month              Yes   \n","\n","               PaymentMethod MonthlyCharges  TotalCharges Churn  \n","0           Electronic check          29.85         29.85    No  \n","1               Mailed check          56.95        1889.5    No  \n","2               Mailed check          53.85        108.15   Yes  \n","3  Bank transfer (automatic)          42.30       1840.75    No  \n","4           Electronic check          70.70        151.65   Yes  \n","\n","[5 rows x 21 columns]"],"text/html":["\n","  <div id=\"df-cef1fb92-8904-4c21-a9a6-2d963a49f1f9\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>customerID</th>\n","      <th>gender</th>\n","      <th>SeniorCitizen</th>\n","      <th>Partner</th>\n","      <th>Dependents</th>\n","      <th>tenure</th>\n","      <th>PhoneService</th>\n","      <th>MultipleLines</th>\n","      <th>InternetService</th>\n","      <th>OnlineSecurity</th>\n","      <th>...</th>\n","      <th>DeviceProtection</th>\n","      <th>TechSupport</th>\n","      <th>StreamingTV</th>\n","      <th>StreamingMovies</th>\n","      <th>Contract</th>\n","      <th>PaperlessBilling</th>\n","      <th>PaymentMethod</th>\n","      <th>MonthlyCharges</th>\n","      <th>TotalCharges</th>\n","      <th>Churn</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>7590-VHVEG</td>\n","      <td>Female</td>\n","      <td>0</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>1</td>\n","      <td>No</td>\n","      <td>No phone service</td>\n","      <td>DSL</td>\n","      <td>No</td>\n","      <td>...</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Month-to-month</td>\n","      <td>Yes</td>\n","      <td>Electronic check</td>\n","      <td>29.85</td>\n","      <td>29.85</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>5575-GNVDE</td>\n","      <td>Male</td>\n","      <td>0</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>34</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>DSL</td>\n","      <td>Yes</td>\n","      <td>...</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>One year</td>\n","      <td>No</td>\n","      <td>Mailed check</td>\n","      <td>56.95</td>\n","      <td>1889.5</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3668-QPYBK</td>\n","      <td>Male</td>\n","      <td>0</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>2</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>DSL</td>\n","      <td>Yes</td>\n","      <td>...</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Month-to-month</td>\n","      <td>Yes</td>\n","      <td>Mailed check</td>\n","      <td>53.85</td>\n","      <td>108.15</td>\n","      <td>Yes</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>7795-CFOCW</td>\n","      <td>Male</td>\n","      <td>0</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>45</td>\n","      <td>No</td>\n","      <td>No phone service</td>\n","      <td>DSL</td>\n","      <td>Yes</td>\n","      <td>...</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>One year</td>\n","      <td>No</td>\n","      <td>Bank transfer (automatic)</td>\n","      <td>42.30</td>\n","      <td>1840.75</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>9237-HQITU</td>\n","      <td>Female</td>\n","      <td>0</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>2</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>Fiber optic</td>\n","      <td>No</td>\n","      <td>...</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Month-to-month</td>\n","      <td>Yes</td>\n","      <td>Electronic check</td>\n","      <td>70.70</td>\n","      <td>151.65</td>\n","      <td>Yes</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 21 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cef1fb92-8904-4c21-a9a6-2d963a49f1f9')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-cef1fb92-8904-4c21-a9a6-2d963a49f1f9 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-cef1fb92-8904-4c21-a9a6-2d963a49f1f9');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-74703085-65b5-441f-8ea8-01c4b45ba499\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-74703085-65b5-441f-8ea8-01c4b45ba499')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-74703085-65b5-441f-8ea8-01c4b45ba499 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df"}},"metadata":{},"execution_count":28}]},{"cell_type":"code","source":["df.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"1f0zEwuAVYr2","executionInfo":{"status":"ok","timestamp":1757168160364,"user_tz":-330,"elapsed":114,"user":{"displayName":"Zubair Imran","userId":"00267973920718476251"}},"outputId":"a1f27360-d134-4462-91db-473bc3f21130"},"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       SeniorCitizen       tenure  MonthlyCharges\n","count    7043.000000  7043.000000     7043.000000\n","mean        0.162147    32.371149       64.761692\n","std         0.368612    24.559481       30.090047\n","min         0.000000     0.000000       18.250000\n","25%         0.000000     9.000000       35.500000\n","50%         0.000000    29.000000       70.350000\n","75%         0.000000    55.000000       89.850000\n","max         1.000000    72.000000      118.750000"],"text/html":["\n","  <div id=\"df-b5680d2c-b314-43f1-81ed-dc6beb5ed016\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>SeniorCitizen</th>\n","      <th>tenure</th>\n","      <th>MonthlyCharges</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>7043.000000</td>\n","      <td>7043.000000</td>\n","      <td>7043.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>0.162147</td>\n","      <td>32.371149</td>\n","      <td>64.761692</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>0.368612</td>\n","      <td>24.559481</td>\n","      <td>30.090047</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>18.250000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>0.000000</td>\n","      <td>9.000000</td>\n","      <td>35.500000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>0.000000</td>\n","      <td>29.000000</td>\n","      <td>70.350000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>0.000000</td>\n","      <td>55.000000</td>\n","      <td>89.850000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>1.000000</td>\n","      <td>72.000000</td>\n","      <td>118.750000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b5680d2c-b314-43f1-81ed-dc6beb5ed016')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-b5680d2c-b314-43f1-81ed-dc6beb5ed016 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-b5680d2c-b314-43f1-81ed-dc6beb5ed016');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-81bc01b5-8659-4b9a-8567-18bd6feb33ba\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-81bc01b5-8659-4b9a-8567-18bd6feb33ba')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-81bc01b5-8659-4b9a-8567-18bd6feb33ba button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"SeniorCitizen\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2489.9992387084,\n        \"min\": 0.0,\n        \"max\": 7043.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.1621468124378816,\n          1.0,\n          0.36861160561002687\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tenure\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2478.9752758409018,\n        \"min\": 0.0,\n        \"max\": 7043.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          32.37114865824223,\n          29.0,\n          7043.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MonthlyCharges\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2468.7047672837775,\n        \"min\": 18.25,\n        \"max\": 7043.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          64.76169246059918,\n          70.35,\n          7043.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":["#Checking for missing values\n","\n","df.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":742},"id":"NX9emmqGVbJ9","executionInfo":{"status":"ok","timestamp":1757168161288,"user_tz":-330,"elapsed":15,"user":{"displayName":"Zubair Imran","userId":"00267973920718476251"}},"outputId":"235b4002-b3b5-4def-dd31-061c15f9a312"},"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/plain":["customerID          0\n","gender              0\n","SeniorCitizen       0\n","Partner             0\n","Dependents          0\n","tenure              0\n","PhoneService        0\n","MultipleLines       0\n","InternetService     0\n","OnlineSecurity      0\n","OnlineBackup        0\n","DeviceProtection    0\n","TechSupport         0\n","StreamingTV         0\n","StreamingMovies     0\n","Contract            0\n","PaperlessBilling    0\n","PaymentMethod       0\n","MonthlyCharges      0\n","TotalCharges        0\n","Churn               0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>customerID</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>gender</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>SeniorCitizen</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Partner</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Dependents</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>tenure</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>PhoneService</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>MultipleLines</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>InternetService</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>OnlineSecurity</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>OnlineBackup</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>DeviceProtection</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>TechSupport</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>StreamingTV</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>StreamingMovies</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Contract</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>PaperlessBilling</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>PaymentMethod</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>MonthlyCharges</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>TotalCharges</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Churn</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":30}]},{"cell_type":"code","source":["#Visualization to find patterns linked to churn\n","\n","sns.set_style('whitegrid')"],"metadata":{"id":"V6Bq5PPXVz4B","executionInfo":{"status":"ok","timestamp":1757168162505,"user_tz":-330,"elapsed":2,"user":{"displayName":"Zubair Imran","userId":"00267973920718476251"}}},"execution_count":31,"outputs":[]},{"cell_type":"code","source":["#Churn Distribution\n","\n","plt.figure(figsize=(6, 4))\n","sns.countplot(x='Churn', data=df)\n","plt.title('Distribution of Customer Churn')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":410},"id":"_q0LSWqsV7AY","executionInfo":{"status":"ok","timestamp":1757168163646,"user_tz":-330,"elapsed":120,"user":{"displayName":"Zubair Imran","userId":"00267973920718476251"}},"outputId":"f03eb9da-82ed-44d1-dc17-a2ac40b9379b"},"execution_count":32,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 600x400 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["**Insight**:\n","\n","The countplot reveals that there are significantly more customers who did not churn (No) compared to those who did churn (Yes), indicating an imbalanced dataset.\n","\n"],"metadata":{"id":"UuzLEAgCWYfF"}},{"cell_type":"code","source":["#Finding the exact number of customers that churned\n","\n","churned_customers = df[df['Churn'] == 'Yes'].shape[0]\n","print(f\"The exact number of customers who churned is: {churned_customers}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"i9iibxRaWAFK","executionInfo":{"status":"ok","timestamp":1757168165383,"user_tz":-330,"elapsed":13,"user":{"displayName":"Zubair Imran","userId":"00267973920718476251"}},"outputId":"a7986c9f-19fe-438d-c4f7-3324eaf9f094"},"execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":["The exact number of customers who churned is: 1869\n"]}]},{"cell_type":"code","source":["#Churn by Contract Type\n","\n","plt.figure(figsize=(8, 5))\n","sns.countplot(x='Contract', hue='Churn', data=df)\n","plt.title('Churn Rate by Contract Type')\n","plt.xlabel('Contract Type')\n","plt.ylabel('Number of Customers')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":487},"id":"ymD5OLbhWkv7","executionInfo":{"status":"ok","timestamp":1757168166546,"user_tz":-330,"elapsed":255,"user":{"displayName":"Zubair Imran","userId":"00267973920718476251"}},"outputId":"e6fff6a9-c6ee-4bc2-fab6-a7546b836df4"},"execution_count":34,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["**Insight**:\n","\n","This plot clearly shows that customers with month-to-month contracts have a significantly higher churn rate compared to those with one-year or two-year contracts.\n","\n"],"metadata":{"id":"8SInwCh6WzC7"}},{"cell_type":"code","source":["#Finding the exact number of customers who churned (by contract type)\n","\n","churn_by_contract = df.groupby(['Contract', 'Churn']).size().unstack(fill_value=0)\n","print(\"Number of customers churned and not churned by contract type:\")\n","display(churn_by_contract)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":192},"id":"jCD5OTKTWpKf","executionInfo":{"status":"ok","timestamp":1757168168282,"user_tz":-330,"elapsed":52,"user":{"displayName":"Zubair Imran","userId":"00267973920718476251"}},"outputId":"ed8069aa-0a87-4fe9-bf5c-21f9e6d4ba0c"},"execution_count":35,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of customers churned and not churned by contract type:\n"]},{"output_type":"display_data","data":{"text/plain":["Churn             No   Yes\n","Contract                  \n","Month-to-month  2220  1655\n","One year        1307   166\n","Two year        1647    48"],"text/html":["\n","  <div id=\"df-1a57e2b9-bf57-44a4-a61a-44d0304ee9ec\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th>Churn</th>\n","      <th>No</th>\n","      <th>Yes</th>\n","    </tr>\n","    <tr>\n","      <th>Contract</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Month-to-month</th>\n","      <td>2220</td>\n","      <td>1655</td>\n","    </tr>\n","    <tr>\n","      <th>One year</th>\n","      <td>1307</td>\n","      <td>166</td>\n","    </tr>\n","    <tr>\n","      <th>Two year</th>\n","      <td>1647</td>\n","      <td>48</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1a57e2b9-bf57-44a4-a61a-44d0304ee9ec')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1a57e2b9-bf57-44a4-a61a-44d0304ee9ec button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1a57e2b9-bf57-44a4-a61a-44d0304ee9ec');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-adba8268-744e-47b2-936d-33af997e7818\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-adba8268-744e-47b2-936d-33af997e7818')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-adba8268-744e-47b2-936d-33af997e7818 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_5c410025-c232-4b94-80be-74e497ad4b11\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('churn_by_contract')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_5c410025-c232-4b94-80be-74e497ad4b11 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('churn_by_contract');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"churn_by_contract","summary":"{\n  \"name\": \"churn_by_contract\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"Contract\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Month-to-month\",\n          \"One year\",\n          \"Two year\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"No\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 461,\n        \"min\": 1307,\n        \"max\": 2220,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2220,\n          1307,\n          1647\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Yes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 895,\n        \"min\": 48,\n        \"max\": 1655,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1655,\n          166,\n          48\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}]},{"cell_type":"markdown","source":["**Results**:\n","\n","There are exactly **1869** customers who churned, out of which **1655** **had month-to-month contracts**, 166 had one year contracts and 48 had two year contracts"],"metadata":{"id":"w7ZBWqV2Xmg3"}},{"cell_type":"markdown","source":["#**Data Preprocessing & Feature Engineering**\n"],"metadata":{"id":"Ad2dn7k8YIo_"}},{"cell_type":"markdown","source":["Before we can use AI, we need to clean the data and convert it into a format that a machine learning model can understand. This involves handling missing values and converting text-based columns to numbers."],"metadata":{"id":"Ellk0sPZYQqW"}},{"cell_type":"code","source":["#We drop the customerID column as it's not a useful predictor\n","\n","df.drop('customerID', axis=1, inplace=True)"],"metadata":{"id":"UzQN-p4UXTUM","executionInfo":{"status":"ok","timestamp":1757168208005,"user_tz":-330,"elapsed":14,"user":{"displayName":"Zubair Imran","userId":"00267973920718476251"}}},"execution_count":36,"outputs":[]},{"cell_type":"code","source":["#The 'TotalCharges' column has spaces for new customers. Let's convert it to numeric.\n","#We'll set errors='coerce' to turn problematic values into 'NaN' (Not a Number)\n","\n","df['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors='coerce')"],"metadata":{"id":"oTRIwGlxYaA-","executionInfo":{"status":"ok","timestamp":1757168230208,"user_tz":-330,"elapsed":16,"user":{"displayName":"Zubair Imran","userId":"00267973920718476251"}}},"execution_count":37,"outputs":[]},{"cell_type":"code","source":["#Now, we can fill the few missing values (from new customers) with the median\n","\n","df.dropna(inplace=True)"],"metadata":{"id":"knewEgm1Y12C","executionInfo":{"status":"ok","timestamp":1757168247155,"user_tz":-330,"elapsed":54,"user":{"displayName":"Zubair Imran","userId":"00267973920718476251"}}},"execution_count":38,"outputs":[]},{"cell_type":"code","source":["#Converting binary categorical variables to 0s and 1s using Label Encoding\n","#For the 'Churn' column (our target), 'No' will be 0 and 'Yes' will be 1.\n","\n","df['Churn'] = df['Churn'].apply(lambda x: 1 if x == 'Yes' else 0)"],"metadata":{"id":"atoswZCqY5-P","executionInfo":{"status":"ok","timestamp":1757168283689,"user_tz":-330,"elapsed":15,"user":{"displayName":"Zubair Imran","userId":"00267973920718476251"}}},"execution_count":39,"outputs":[]},{"cell_type":"code","source":["#Converting all other categorical columns into numeric using one-hot encoding\n","\n","df_encoded = pd.get_dummies(df, drop_first=True)"],"metadata":{"id":"sQZQUVZdZC5h","executionInfo":{"status":"ok","timestamp":1757168305771,"user_tz":-330,"elapsed":70,"user":{"displayName":"Zubair Imran","userId":"00267973920718476251"}}},"execution_count":41,"outputs":[]},{"cell_type":"code","source":["print(\"\\nData after preprocessing and encoding:\")\n","print(df_encoded.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UCZ1dS51ZHaE","executionInfo":{"status":"ok","timestamp":1757168315615,"user_tz":-330,"elapsed":16,"user":{"displayName":"Zubair Imran","userId":"00267973920718476251"}},"outputId":"2a959f32-5c81-4106-d74c-fb25036b65ac"},"execution_count":42,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Data after preprocessing and encoding:\n","   SeniorCitizen  tenure  MonthlyCharges  TotalCharges  Churn  gender_Male  \\\n","0              0       1           29.85         29.85      0        False   \n","1              0      34           56.95       1889.50      0         True   \n","2              0       2           53.85        108.15      1         True   \n","3              0      45           42.30       1840.75      0         True   \n","4              0       2           70.70        151.65      1        False   \n","\n","   Partner_Yes  Dependents_Yes  PhoneService_Yes  \\\n","0         True           False             False   \n","1        False           False              True   \n","2        False           False              True   \n","3        False           False             False   \n","4        False           False              True   \n","\n","   MultipleLines_No phone service  ...  StreamingTV_No internet service  \\\n","0                            True  ...                            False   \n","1                           False  ...                            False   \n","2                           False  ...                            False   \n","3                            True  ...                            False   \n","4                           False  ...                            False   \n","\n","   StreamingTV_Yes  StreamingMovies_No internet service  StreamingMovies_Yes  \\\n","0            False                                False                False   \n","1            False                                False                False   \n","2            False                                False                False   \n","3            False                                False                False   \n","4            False                                False                False   \n","\n","   Contract_One year  Contract_Two year  PaperlessBilling_Yes  \\\n","0              False              False                  True   \n","1               True              False                 False   \n","2              False              False                  True   \n","3               True              False                 False   \n","4              False              False                  True   \n","\n","   PaymentMethod_Credit card (automatic)  PaymentMethod_Electronic check  \\\n","0                                  False                            True   \n","1                                  False                           False   \n","2                                  False                           False   \n","3                                  False                           False   \n","4                                  False                            True   \n","\n","   PaymentMethod_Mailed check  \n","0                       False  \n","1                        True  \n","2                        True  \n","3                       False  \n","4                       False  \n","\n","[5 rows x 31 columns]\n"]}]},{"cell_type":"markdown","source":["#**AI-Driven Feature Selection**"],"metadata":{"id":"6QFWdU_3ZSAR"}},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","from sklearn.ensemble import RandomForestClassifier\n","\n","#Separating features (X) and target (y)\n","\n","X = df_encoded.drop('Churn', axis=1)\n","y = df_encoded['Churn']"],"metadata":{"id":"uJ76_3oeZKsC","executionInfo":{"status":"ok","timestamp":1757168481498,"user_tz":-330,"elapsed":1167,"user":{"displayName":"Zubair Imran","userId":"00267973920718476251"}}},"execution_count":43,"outputs":[]},{"cell_type":"code","source":["#Use a Random Forest to find top predictors ---\n","#Train a temporary model just for feature selection\n","\n","feature_selector = RandomForestClassifier(n_estimators=100, random_state=42)\n","feature_selector.fit(X, y)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":80},"id":"5ZHP5vKZZy6R","executionInfo":{"status":"ok","timestamp":1757168491975,"user_tz":-330,"elapsed":1258,"user":{"displayName":"Zubair Imran","userId":"00267973920718476251"}},"outputId":"59a21a8f-787b-421b-914e-d60be335747d"},"execution_count":44,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestClassifier(random_state=42)"],"text/html":["<style>#sk-container-id-1 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: #000;\n","  --sklearn-color-text-muted: #666;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-1 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-1 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-1 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-1 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-1 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-1 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-1 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-1 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-1 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-1 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-1 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: flex;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","  align-items: start;\n","  justify-content: space-between;\n","  gap: 0.5em;\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label .caption {\n","  font-size: 0.6rem;\n","  font-weight: lighter;\n","  color: var(--sklearn-color-text-muted);\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-1 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-1 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-1 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-1 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-1 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-1 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 0.5em;\n","  text-align: center;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-1 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-1 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-1 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>RandomForestClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.ensemble.RandomForestClassifier.html\">?<span>Documentation for RandomForestClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier(random_state=42)</pre></div> </div></div></div></div>"]},"metadata":{},"execution_count":44}]},{"cell_type":"code","source":["#Getting feature importances\n","\n","importances = feature_selector.feature_importances_\n","feature_names = X.columns"],"metadata":{"id":"Vzez_836Z1c0","executionInfo":{"status":"ok","timestamp":1757168516549,"user_tz":-330,"elapsed":27,"user":{"displayName":"Zubair Imran","userId":"00267973920718476251"}}},"execution_count":45,"outputs":[]},{"cell_type":"code","source":["#Creating a DataFrame for visualization\n","\n","feature_importance_df = pd.DataFrame({'feature': feature_names, 'importance': importances})\n","feature_importance_df = feature_importance_df.sort_values(by='importance', ascending=False)"],"metadata":{"id":"RdF3CSDFZ7v-","executionInfo":{"status":"ok","timestamp":1757168530031,"user_tz":-330,"elapsed":4,"user":{"displayName":"Zubair Imran","userId":"00267973920718476251"}}},"execution_count":46,"outputs":[]},{"cell_type":"code","source":["#Plotting the top 15 most important features\n","\n","plt.figure(figsize=(10, 8))\n","sns.barplot(x='importance', y='feature', data=feature_importance_df.head(15))\n","plt.title('Top 15 Predictors of Customer Churn')\n","plt.xlabel('Importance')\n","plt.ylabel('Feature')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":718},"id":"81FbELmmZ_C2","executionInfo":{"status":"ok","timestamp":1757168535715,"user_tz":-330,"elapsed":552,"user":{"displayName":"Zubair Imran","userId":"00267973920718476251"}},"outputId":"0c6f8b3b-b07f-4909-d9bf-bef1ef77cfdd"},"execution_count":47,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x800 with 1 Axes>"],"image/png":"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f/1lOX+zY8eOZerj6NGjcnV1tWxKeK8cP37csgHivVKkSBEVKFBA6enpCgkJyfIrY4aGt7e35V/Fb5adgkrp0qV15swZXbhwIUcxurq6ZjnOX3/9JUdHx2zfmHp5ealz5876+OOPtW7dOhUuXFjTp0+/L2PfLOPJIcuWLctWew8Pjyz/5f3kyZOZjrm5uVmWFv30009q0KCBpk+frmvXrkm69Y23t7e30tPTM/3M//PPP0pKSsr0u5FTGTNZnJycbvkz99+ZT9l1t3nNroxNai9dumR1/L+zTQAgJyhWAAAA1atXTyaTSfPnz7c6PnfuXDk4OKhevXpWx3///XerR1ueOnVK69atU+3atbP1L7LZkbHM4ma//PKL9uzZc8t/ec4rBoNBTZo00Zo1a3Tw4MHbxlavXj2dOXNGq1evthxLSUnRN998c8dxGjduLLPZrJiYmEznbi5+uLm5ZbopNxgMql27ttatW2f16Mh//vlHK1asUNWqVe94c2symTLdaBYtWlReXl5ZPno1L8fOSpMmTeTn56fp06fr999/z3T+8uXLmjJliuV1qVKl9Mcff1jF+tNPP+nUqVNW1/37779Wr52dnVW2bFmZzWalpaVJurHPiJT5xjtjdsnnn39udXzOnDlW53OraNGiqlGjhhYuXKgzZ85kOp/V70N23W1esytjpsfNjy02mUzZ+tkHgDthGQgAAFDDhg1Vs2ZNTZkyRSdOnJDRaNRvv/2mdevWqVu3bpmmn/v5+alXr15Wjy6VpAEDBtxxrB9//FH79++XJKWlpenAgQP6+OOPLXGUL19ektSxY0dVqFBB/v7+cnd31969e7VkyRIVL15cffv2zcu3n6Vhw4Zp8+bNeuGFF9ShQweVK1dOFy9e1J49e7Rx40Zt2bJF0o1NDufPn6/hw4drz5498vT01LfffnvbKe8Znn76aT3//POaN2+ejh07prp16yo9PV3bt29XzZo11aVLF0lSpUqVtHHjRs2ZM0deXl4qWbKkKleurMGDB2vDhg3q1KmTOnXqJIPBoIULFyo1NVVvvPHGHce/cuWK6tevryZNmqh8+fJyc3PThg0btHv3boWHh9/22tyOnRUnJyfFxMSoR48e6tKli5o2baoqVarIyclJf/75p1asWKFChQppyJAhkqQOHTpozZo16t27t5o1a6aEhAQtX748089r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DRmf781fHh4et2x/6tQpDRo0SNWqVVONGjX06quvKjEx0arN4sWL1aJFC/n7+6tOnToaO3aspBtLXySpX79+MhqNltfR0dF6/vnntWjRIjVs2FCBgYGSpJMnT+rVV19VcHCwqlSpokGDBumff/6xjJNxXVxcnBo2bKiqVatqyJAhunz5sqXNf5eBpKamavLkyapfv75lttCiRYtu+X6z037Pnj1q27atKleurI4dO+qvv/6yOr927VqFhoYqICBAzz77bKbZSUlJSXrnnXcUEhKigIAAtWzZUj/99FOW8Zw/f15t27ZVv379lJqaesu4AQAAAOBesnmx4r/y58+vtLQ0SZKDg4MiIiK0YsUKTZw4UZs2bdLkyZMlSW5ubmrRooViY2Otrl+yZImaNGmiggULWo5FR0fr1Vdf1dKlS5UvXz4NGzZMkydPVkREhObPn6+EhAR9+OGHlvbLli3Thx9+qCFDhmjlypUaOnSopk2bpqVLl1qNNWXKFPXq1UtxcXEqU6aMhg0bpuvXrys4OFhvvfWWChYsqPj4eMXHx6tnz56W65ycnNSqVSur2JcuXar27dtnysfYsWP1+++/a8qUKVq2bJmaNm2q3r176+jRo3ccZ86cOfL391dcXJw6deqk0aNHW250k5OT1atXL3l4eGjx4sWaOnWqNmzYoHHjxlmunz17tpYuXaoJEyZowYIFunjxon744Yfsf5h3KS0tTb169VKBAgU0f/58ffXVV3Jzc1Pv3r0tN84LFizQ2LFj9cILL2j58uX6+OOPVbp0aUk3ihiSFBkZqfj4eMtrSUpISNCaNWsUExOjuLg4paen67XXXtPFixc1b948zZkzR8ePH9eQIUOsYkpISNC6des0ffp0zZgxQ1u3btXMmTNv+R7efPNNfffdd3r77be1atUqjR07VgUKFMhV+ylTpig8PFxLliyRwWDQW2+9ZTm3bds2DR8+XF27dtXKlSs1duxYxcbGavr06ZKk9PR0vfzyy9qxY4cmT56slStXatiwYXJ0zPyrf+rUKXXq1El+fn6aNm2azWfAAAAAAHh02XwZSAaz2ayNGzcqPj5eXbp0kSR1797dcr5kyZIaPHiwRo0apdGjR0uSOnTooI4dO+rMmTPy8vLSuXPn9Ouvv2rOnDlWfffs2VN169aVJHXt2lVDhw7V3LlzVbVqVUlS+/bt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qampmjx5surXry9/f381atRIixYtUmJiorp27SpJql69uoxGo8LDw2+bB09PT8uXu7u7HBwc5OnpKRcXF9WrV09//fWXJCk9PV01atTQCy+8YLn222+/Vf369S2vDxw4oK5duyowMFA1a9bUyJEjdeXKlSzHNZvNatSokT777DOr4/v27ZPRaNSxY8ckSUlJSYqIiNDTTz+tKlWqqGvXrtq/f7+lfXby1bBhQ3300Ud68803VaVKFb3zzju3zQkAAAAA3EsUK5ClCxcuaP369ercuXOWMwcylk+kp6frtdde08WLFzVv3jzNmTNHx48f15AhQ6zaJyQkaN26dZo+fbpmzJihrVu3aubMmZKkiIgIBQcH64UXXlB8fLzi4+NVvHhxy7Xvv/++hg0bppUrV8poNCo5OVn169fX3LlztXTpUtWtW1d9+/bVyZMnLde8+eab+u677/T2229r1apVGjt2rAoUKKDixYsrOjpakrR69WrFx8fneOmJu7u7KlSooC1btkiSDh48KAcHB+3du9dSgNi6dauqV68uSUpOTlavXr3k4eGhxYsXa+rUqdqwYYPGjRuXZf8ODg5q166dYmNjrY4vWbJE1atXl4+PjyRp0KBBOnfunGbOnKnY2FhVqlRJ3bp104ULFyzj3ilfkjR79myVL19ecXFxeu2113KUEwAAAADICxQrkKWEhASZzWY9+eSTt223ceNGHTx4UO+//778/f1VuXJlRUVFacuWLdq1a5elndlsVmRkpPz8/FStWjW1bt1aGzdulHTjpt/JyUkuLi6WGQwGg8Fy7cCBA1W7dm2VLl1ahQsXVvny5dWxY0f5+fmpTJkyGjx4sEqXLq0ff/xRknTkyBGtWrVKEyZMUKNGjVSqVCnVqlVLzZs3l8FgkIeHhySpaNGiltkSOVWjRg1LsWLz5s0KCQlR2bJltX37dknSli1bVKNGDUnSihUrlJqaqkmTJsnPz0+1atXSO++8o2+//dZqJsrNQkNDdeTIEUsu09LStGLFCrVr106StG3bNu3atUvTpk1TQECAypQpo+HDh6tQoUJas2aNJN0xXxmefvpp9ezZU6VLl1bp0qVznBMAAAAAyC32rECWzGZzttodPnxYTzzxhNVMiHLlyqlQoUL666+/FBgYKEny9vZWwYIFLW28vLx07ty5bI0REBBg9frKlSuKiYnRzz//rLNnz8pkMunq1auWmQL79u2TwWCwzGi4l6pXr67FixfLZDJp69atql27tooVK6YtW7ZYlmpkFCsOHz4so9FoNVOlSpUqSk9P15EjR1SsWLFM/T/++OOqX7++Fi9erMDAQP30009KTU1V06ZNJd1YVpKcnKyaNWtaXXf16lUlJCRIunO+Mvj7++dpbgAAAAAgpyhWIEs+Pj5ycHCw7MeQW1ltipndgoirq6vV60mTJmnDhg0aPny4SpcuLRcXFw0cOFBpaWmSJBcXl9wHnE3Vq1fXlStXtGfPHm3dulVDhgyRp6enPv30U5UvX15eXl4qU6ZMrsbo0KGD3nzzTb311luKjY1V8+bNLTm5cuWKPD09NW/evEzXZcwYuVO+Mvw3zwAAAABgKywDQZYKFy6sOnXqaP78+UpOTs50PikpSZJUtmxZnT59WqdOnbKcO3TokJKSklS2bNlsj+fk5KT09PRstf39998VGhqqRo0ayWg0qlixYjpx4oTlvJ+fn9LT07V169ZbjiVJJpMp2/HdSqFChWQ0GjV//nw5OTmpbNmyqlatmvbu3auffvrJMqtCupGrjJkQGXbs2CFHR0f5+vrecoz69evL1dVVX331ldavX29ZAiJJlSpV0j///CODwSAfHx+rryJFiki6c74AAAAAwN5QrMAtjRo1Sunp6erQoYPWrFmjo0eP6vDhw/riiy/04osvSpJCQkLk5+en119/XXv27NGuXbv05ptvqkaNGpmWb9yOt7e3/vjjDyUmJur8+fO3LVz4+Pjohx9+0L59+7R//34NGzbMqn3JkiUVGhqqt956S2vXrtXx48e1efNmrVy50jKWg4ODfv75Z50/f/6WT+PIrho1amj58uWWZSeFCxdW2bJltWrVKqulKK1atZKzs7PCw8N18OBBbdq0SePGjdPzzz+f5RKQDAaDQW3bttX7778vHx8fBQcHW86FhIQoKChI/fr1U3x8vBITE7Vjxw5NmTJFu3fvzla+AAAAAMDeUKzALZUqVUqxsbGqWbOmJk2apJYtW6pHjx7auHGjRo8eLenGEys+/vhjFSpUSF26dFH37t1VqlQpTZky5a7G6tmzpwwGg1q0aKFatWpl2k/hZuHh4SpUqJA6duyovn37qm7duqpUqZJVm9GjR6tJkyYaPXq0mjVrppEjRyolJUXSjX0gBgwYoPff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7HNzc1OrVq20efNmGYZh3R4RESFfX1+tX79enTp10tixY3Xy5ElJUnJysnr16qWCBQtq5cqV+vzzz1WgQAG9+eabSkpKSje+yWRSu3bttG7dOpvta9euVc2aNeXh4SFJGjRokC5duqRFixZp3bp18vHxUbdu3XT16lVJylTeJGnp0qXy9vbW+vXr1a9fv/vmBgAAAAByEtNAYCMmJkaGYahixYr3bbdjxw799ttv+v77760FhunTp6tFixY6dOiQqlatKunu3QFTpkxRoUKFJEmtW7fWjh07NGTIEBUuXFh58+aVs7Oz3Nzc0o0xcOBA1a1b1/q+aNGi8vb2tr4fPHiwtm7dqh9++EFdunTRqVOntHnzZkVERCgwMFCSVK5cOWv7IkWKSJJKlChhLbrcz5kzZ2QYhjw9PTPc7+npqWvXruny5csqUaKEJOnll19W586dJUm9e/fWsmXLtHPnTlWsWFGbNm1SamqqJk2aJJPJJEmaMmWKatasqV27dqlevXrpxggODtacOXOsOU1OTtbGjRs1YsQISdKePXt06NAh7dixwzptY8SIEdq6dau+/fZbdejQQd7e3vfNW5ratWurZ8+eD8wLAAAAAOQ0ihWw8ee7BO7nxIkTevbZZ23uhHj++efl4uKikydPWosVZcqUsRYqJMnd3V2XLl3K1BhVqlSxeX/z5k3NmzdPP/74o+Lj42WxWHT79m3rHQLR0dEym82qWbNmpvrPrMzmRJK8vLysr00mk1xdXa3ne+TIEcXExKh69eo2x9y5c0cxMTEZ9leyZEkFBQVpzZo1qlq1qv79738rKSlJr732miTp6NGjSkxMVK1atWyOu337trXPB+Utja+vb6bPEwAAAAByEsUK2PDw8JDJZLJOXciqjBbFzOwv//nz57d5P23aNG3fvl0jRozQc889J2dnZw0cOFDJycmSlG6qRlY999xzMplMOnHihJo0aZJu/4kTJ1SkSBEVL17cuu2v52symaznm5iYKB8fH82YMSNdX3/u46/at2+v4cOHa+TIkVq3bp2aN29uzc3Nmzfl5uamFStWpDuucOHCkh6ctzR/zTcAAAAA2AtrVsBG0aJFVa9ePa1cuVKJiYnp9qc99tPT01MXLlzQ+fPnrfuOHz+uhISEe06byEjevHmVmpqaqbb79+9XcHCwmjRpIi8vL7m6uurs2bPW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PccNDQ3VL7/8on/+859atWqVDMPQW2+9peTkZGub27dva9GiRZo4caI2btyoEiVKaNOmTWrVqpVNoSJNwYIFM5xqsmbNGknSlClTFBUVZX3/V1FRUdavLVu2yMPDQwEBAZLuFmy6deumypUra82aNVq8eLEuXbqkwYMH2/QRGRmpAgUK6IsvvtA//vEPzZ8/X//3f/93zzwAAAAAQG6gWIHHipOTk6ZOnar169crICBAHTt21MyZM3XkyBFJ0p49e3To0CHNmTNHVapUUfny5TVixAi5uLjo22+/tfZjGIamTJmiSpUqKSAgQK1bt9aOHTsyHPP06dP64YcfNHHiRAUEBMjb21szZszQ77//rq1bt1rbJScna+zYsapevboqVqyoxMREXbt2TRUrVnyoc0y788HFxUVubm73nCLi5uYmNzc3ubq6avr06SpUqJDGjx8vSfr0009VuXJlDR06VJ6enqpcubImT56snTt36tSpU9Y+vLy89M4776h8+fJq06aNfH1975kHAAAAAMgtTAPBY+fVV19VgwYNtGfPHh04cEDbtm3T4sWLNXHiRN26dUuJiYmqVauWzTG3b99WTEyM9X2ZMmWsUz4kyd3dXZcuXcpwvBMnTsjJyUnVqlWzbitWrJgqVKigEydOWLflzZvXZmqGYRhZPtfMmDlzpg4cOKC1a9fK2dlZknTkyBHt3LlT/v7+6drHxMSoQoUKktJPJXFzc7tnHgAAAAAgt1CswGPpmWeeUd26dVW3bl31799f4eHhmjt3rv7+97/Lzc1NK1asSHdM4cKFra8zmn6R1eKCs7OzTCaT9X3x4sXl4uKikydPZqnf+/nyyy+1bNkyrVixwmaqSWJioho2bKh333033TFubm7W13/Ng8lkyrUiCwAAAADcC9NA8ER4/vnnlZiYKB8fH128eFFms1keHh42X5l54kZGPD09lZKSooMHD1q3XblyRadOndLzzz9/z+Py5Mmj5s2b66uvvtLvv/+ebv/NmzeVkpKS4bF58+aVxWK5b1z79+/XqFGjNH78ePn5+dns8/Hx0bFjx1SmTJl0eShQoMB9+wUAAAAAe6NYgcfKlStX1LVrV3355Zc6cuSIYmNjtXnzZi1evFiNGzdWYGCg/Pz81L9/f0VFRSkuLk779u3TrFmzdPjw4Ucas3z58mrcuLFGjx6tPXv26MiR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\n"},"metadata":{}}]},{"cell_type":"markdown","source":["**Insight**:\n","\n","This barplot shows the importance of each feature in predicting customer churn. We can see that **TotalCharges**, **tenure**, and **MonthlyCharges** are the top 3 predictors"],"metadata":{"id":"WrQ39TAdaMq3"}},{"cell_type":"markdown","source":["#**Model Training and Optimization**"],"metadata":{"id":"iubNuBRIbbGF"}},{"cell_type":"markdown","source":["**A Note on Metrics:**\n","\n","**Accuracy** : Overall, what percentage of predictions were correct\n","\n","$$ \\text{Accuracy} = \\frac{\\text{True Positives} + \\text{True Negatives}}{\\text{Total Predictions}} $$\n","\n","**Recall** : Of all the customers who actually churned, how many did the model correctly identify?\n","\n","$$ \\text{Recall} = \\frac{\\text{True Positives}}{\\text{True Positives} + \\text{False Negatives}} $$\n","\n","This is crucial for this problem because we'd rather wrongly flag a happy customer than miss a customer who is about to leave."],"metadata":{"id":"TYFHMHH0bv8c"}},{"cell_type":"code","source":["from sklearn.metrics import accuracy_score, recall_score, classification_report, confusion_matrix\n","\n","#We already have our features (X) and target (y)\n","#Splitting the data into training and testing sets\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)"],"metadata":{"id":"1deqmez7aATQ","executionInfo":{"status":"ok","timestamp":1757169396159,"user_tz":-330,"elapsed":72,"user":{"displayName":"Zubair Imran","userId":"00267973920718476251"}}},"execution_count":48,"outputs":[]},{"cell_type":"code","source":["#Training and Optimizing the Random Forest Model\n","#We use 'class_weight='balanced'' because the dataset is imbalanced (more non-churners than churners).\n","#This helps the model pay more attention to the minority class (churners), improving recall.\n","#The parameters here are a good starting point to get close to your target metrics.\n","\n","model = RandomForestClassifier(n_estimators=200, max_depth=10, class_weight='balanced', random_state=42)"],"metadata":{"id":"LNQPUexldSe8","executionInfo":{"status":"ok","timestamp":1757169415323,"user_tz":-330,"elapsed":3,"user":{"displayName":"Zubair Imran","userId":"00267973920718476251"}}},"execution_count":49,"outputs":[]},{"cell_type":"code","source":["#Training the model\n","\n","model.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":97},"id":"jQeBXKV9dXKS","executionInfo":{"status":"ok","timestamp":1757169434507,"user_tz":-330,"elapsed":1656,"user":{"displayName":"Zubair Imran","userId":"00267973920718476251"}},"outputId":"6eb9b53c-574e-4dd4-cd9b-b3c9026337f1"},"execution_count":50,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestClassifier(class_weight='balanced', max_depth=10, n_estimators=200,\n","                       random_state=42)"],"text/html":["<style>#sk-container-id-2 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: #000;\n","  --sklearn-color-text-muted: #666;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-2 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-2 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-2 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-2 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-2 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-2 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-2 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-2 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-2 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-2 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-2 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-2 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-2 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-2 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-2 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: flex;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","  align-items: start;\n","  justify-content: space-between;\n","  gap: 0.5em;\n","}\n","\n","#sk-container-id-2 label.sk-toggleable__label .caption {\n","  font-size: 0.6rem;\n","  font-weight: lighter;\n","  color: var(--sklearn-color-text-muted);\n","}\n","\n","#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-2 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-2 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-2 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-2 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-2 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-2 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-2 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-2 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-2 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-2 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 0.5em;\n","  text-align: center;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-2 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-2 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-2 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(class_weight=&#x27;balanced&#x27;, max_depth=10, n_estimators=200,\n","                       random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>RandomForestClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.ensemble.RandomForestClassifier.html\">?<span>Documentation for RandomForestClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier(class_weight=&#x27;balanced&#x27;, max_depth=10, n_estimators=200,\n","                       random_state=42)</pre></div> </div></div></div></div>"]},"metadata":{},"execution_count":50}]},{"cell_type":"code","source":["#Making predictions on the test set\n","\n","y_pred = model.predict(X_test)"],"metadata":{"id":"hG9lrSOUdbc3","executionInfo":{"status":"ok","timestamp":1757169448727,"user_tz":-330,"elapsed":3,"user":{"displayName":"Zubair Imran","userId":"00267973920718476251"}}},"execution_count":51,"outputs":[]},{"cell_type":"code","source":["#Evaluating the Model\n","\n","accuracy = accuracy_score(y_test, y_pred)\n","recall = recall_score(y_test, y_pred) #Recall for the positive class (Churn=1)\n","\n","print(f\"Model Accuracy: {accuracy:.2f}\")\n","print(f\"Model Recall (for churners): {recall:.2f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gXSlOKh4dfUt","executionInfo":{"status":"ok","timestamp":1757169461439,"user_tz":-330,"elapsed":17,"user":{"displayName":"Zubair Imran","userId":"00267973920718476251"}},"outputId":"4ba76b51-65fb-4925-9886-bcd81f8ab105"},"execution_count":52,"outputs":[{"output_type":"stream","name":"stdout","text":["Model Accuracy: 0.77\n","Model Recall (for churners): 0.75\n"]}]},{"cell_type":"code","source":["#Displaying a detailed classification report and confusion matrix\n","\n","print(\"\\nClassification Report:\")\n","print(classification_report(y_test, y_pred, target_names=['No Churn', 'Churn']))\n","\n","print(\"\\nConfusion Matrix:\")\n","cm = confusion_matrix(y_test, y_pred)\n","sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['No Churn', 'Churn'], yticklabels=['No Churn', 'Churn'])\n","plt.xlabel('Predicted')\n","plt.ylabel('Actual')\n","plt.title('Confusion Matrix')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":698},"id":"JkSyJ7qRdibl","executionInfo":{"status":"ok","timestamp":1757169509799,"user_tz":-330,"elapsed":349,"user":{"displayName":"Zubair Imran","userId":"00267973920718476251"}},"outputId":"b31dc228-15e7-4107-aa88-2829793994cf"},"execution_count":53,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","    No Churn       0.90      0.78      0.84      1033\n","       Churn       0.56      0.75      0.64       374\n","\n","    accuracy                           0.77      1407\n","   macro avg       0.73      0.77      0.74      1407\n","weighted avg       0.80      0.77      0.78      1407\n","\n","\n","Confusion Matrix:\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["**Results**:\n","\n","The model achieved an **accuracy of 0.77 [77%]** and a **recall of 0.75 [75%]** for churned customers. The confusion matrix shows that the model correctly identified 279 churned customers and 810 non-churn customers but also incorrectly predicted 223 customers would churn when they did not.\n","\n"],"metadata":{"id":"uzEO7MwceQIQ"}},{"cell_type":"markdown","source":["#**Actionable Retention Strategies**"],"metadata":{"id":"7zGaBXGne7Nu"}},{"cell_type":"markdown","source":["Here are some actionable strategies based on our findings:\n","\n","**Target Month-to-Month Customers:** Since Contract_Month-to-month is the top predictor of churn, the business should proactively offer these customers a discount to switch to an annual or two-year contract. This locks them in and reduces their likelihood of churning.\n","\n","**Engage New Customers:** Since low tenure is a strong predictor, implement a special onboarding program for customers in their first 3-6 months. This could include follow-up calls, usage tutorials, or a small loyalty bonus to improve their initial experience and build loyalty.\n","\n","**Review High-Spending, Low-Tenure Customers:** Customers with high MonthlyCharges but low tenure are high-risk. Create a \"high-value risk\" segment and have account managers personally reach out to ensure they are satisfied with the service and address any issues before they decide to leave."],"metadata":{"id":"iwNGZqfMfAUb"}},{"cell_type":"code","source":[],"metadata":{"id":"iKJKcEMvduKb"},"execution_count":null,"outputs":[]}]}